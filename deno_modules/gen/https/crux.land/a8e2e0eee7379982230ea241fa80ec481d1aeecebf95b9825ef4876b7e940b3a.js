export function defaultOtherHandler(_req) {
    return new Response(null, {
        status: 404,
    });
}
export function defaultErrorHandler(_req, _ctx, err) {
    console.error(err);
    return new Response(null, {
        status: 500,
    });
}
export function defaultUnknownMethodHandler(_req, _ctx, knownMethods) {
    return new Response(null, {
        status: 405,
        headers: {
            Accept: knownMethods.join(", "),
        },
    });
}
export const METHODS = [
    "GET",
    "HEAD",
    "POST",
    "PUT",
    "DELETE",
    "OPTIONS",
    "PATCH",
];
const methodRegex = new RegExp(`(?<=^(?:${METHODS.join("|")}))@`);
export function router(routes, other = defaultOtherHandler, error = defaultErrorHandler, unknownMethod = defaultUnknownMethodHandler) {
    const internalRoutes = {};
    for (const [route, handler] of Object.entries(routes)) {
        let [methodOrPath, path] = route.split(methodRegex);
        let method = methodOrPath;
        if (!path) {
            path = methodOrPath;
            method = "any";
        }
        const r = internalRoutes[path] ?? {
            pattern: new URLPattern({ pathname: path }),
            methods: {}
        };
        r.methods[method] = handler;
        internalRoutes[path] = r;
    }
    return async (req, ctx) => {
        try {
            for (const { pattern, methods } of Object.values(internalRoutes)) {
                const res = pattern.exec(req.url);
                if (res !== null) {
                    for (const [method, handler] of Object.entries(methods)) {
                        if (req.method === method) {
                            return await handler(req, ctx, res.pathname.groups);
                        }
                    }
                    if (methods["any"]) {
                        return await methods["any"](req, ctx, res.pathname.groups);
                    }
                    else {
                        return await unknownMethod(req, ctx, Object.keys(methods));
                    }
                }
            }
            return await other(req, ctx);
        }
        catch (err) {
            return error(req, ctx, err);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,