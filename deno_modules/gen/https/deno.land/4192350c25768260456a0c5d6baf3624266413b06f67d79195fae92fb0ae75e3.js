import { BUILD_ID } from "./constants.ts";
import { denoPlugin, esbuild, toFileUrl } from "./deps.ts";
let esbuildInitalized = false;
async function ensureEsbuildInitialized() {
    if (esbuildInitalized === false) {
        if (Deno.run === undefined) {
            esbuildInitalized = esbuild.initialize({
                wasmURL: "https://unpkg.com/esbuild-wasm@0.14.39/esbuild.wasm",
                worker: false,
            });
        }
        else {
            esbuild.initialize({});
        }
        await esbuildInitalized;
        esbuildInitalized = true;
    }
    else if (esbuildInitalized instanceof Promise) {
        await esbuildInitalized;
    }
}
export class Bundler {
    #importMapURL;
    #islands;
    #cache = undefined;
    constructor(islands, importMapURL) {
        this.#islands = islands;
        this.#importMapURL = importMapURL;
    }
    async bundle() {
        const entryPoints = {
            "main": new URL("../../src/runtime/main.ts", import.meta.url).href,
        };
        for (const island of this.#islands) {
            entryPoints[`island-${island.id}`] = island.url;
        }
        const absWorkingDir = Deno.cwd();
        await ensureEsbuildInitialized();
        const bundle = await esbuild.build({
            bundle: true,
            define: { __FRSH_BUILD_ID: `"${BUILD_ID}"` },
            entryPoints,
            format: "esm",
            metafile: true,
            minify: true,
            outdir: ".",
            absWorkingDir,
            outfile: "",
            platform: "neutral",
            plugins: [denoPlugin({ importMapURL: this.#importMapURL })],
            splitting: true,
            target: ["chrome99", "firefox99", "safari15"],
            treeShaking: true,
            write: false,
        });
        const cache = new Map();
        const absDirUrlLength = toFileUrl(absWorkingDir).href.length;
        for (const file of bundle.outputFiles) {
            cache.set(toFileUrl(file.path).href.substring(absDirUrlLength), file.contents);
        }
        this.#cache = cache;
        return;
    }
    async cache() {
        if (this.#cache === undefined) {
            this.#cache = this.bundle();
        }
        if (this.#cache instanceof Promise) {
            await this.#cache;
        }
        return this.#cache;
    }
    async get(path) {
        const cache = await this.cache();
        return cache.get(path) ?? null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYnVuZGxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFHM0QsSUFBSSxpQkFBaUIsR0FBNEIsS0FBSyxDQUFDO0FBQ3ZELEtBQUssVUFBVSx3QkFBd0I7SUFDckMsSUFBSSxpQkFBaUIsS0FBSyxLQUFLLEVBQUU7UUFDL0IsSUFBSSxJQUFJLENBQUMsR0FBRyxLQUFLLFNBQVMsRUFBRTtZQUMxQixpQkFBaUIsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO2dCQUNyQyxPQUFPLEVBQUUscURBQXFEO2dCQUM5RCxNQUFNLEVBQUUsS0FBSzthQUNkLENBQUMsQ0FBQztTQUNKO2FBQU07WUFDTCxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3hCO1FBQ0QsTUFBTSxpQkFBaUIsQ0FBQztRQUN4QixpQkFBaUIsR0FBRyxJQUFJLENBQUM7S0FDMUI7U0FBTSxJQUFJLGlCQUFpQixZQUFZLE9BQU8sRUFBRTtRQUMvQyxNQUFNLGlCQUFpQixDQUFDO0tBQ3pCO0FBQ0gsQ0FBQztBQUVELE1BQU0sT0FBTyxPQUFPO0lBQ2xCLGFBQWEsQ0FBTTtJQUNuQixRQUFRLENBQVc7SUFDbkIsTUFBTSxHQUF3RCxTQUFTLENBQUM7SUFFeEUsWUFBWSxPQUFpQixFQUFFLFlBQWlCO1FBQzlDLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxhQUFhLEdBQUcsWUFBWSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxLQUFLLENBQUMsTUFBTTtRQUNWLE1BQU0sV0FBVyxHQUEyQjtZQUMxQyxNQUFNLEVBQUUsSUFBSSxHQUFHLENBQUMsMkJBQTJCLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJO1NBQ25FLENBQUM7UUFFRixLQUFLLE1BQU0sTUFBTSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEMsV0FBVyxDQUFDLFVBQVUsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztTQUNqRDtRQUVELE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNqQyxNQUFNLHdCQUF3QixFQUFFLENBQUM7UUFDakMsTUFBTSxNQUFNLEdBQUcsTUFBTSxPQUFPLENBQUMsS0FBSyxDQUFDO1lBQ2pDLE1BQU0sRUFBRSxJQUFJO1lBQ1osTUFBTSxFQUFFLEVBQUUsZUFBZSxFQUFFLElBQUksUUFBUSxHQUFHLEVBQUU7WUFDNUMsV0FBVztZQUNYLE1BQU0sRUFBRSxLQUFLO1lBQ2IsUUFBUSxFQUFFLElBQUk7WUFDZCxNQUFNLEVBQUUsSUFBSTtZQUNaLE1BQU0sRUFBRSxHQUFHO1lBR1gsYUFBYTtZQUNiLE9BQU8sRUFBRSxFQUFFO1lBQ1gsUUFBUSxFQUFFLFNBQVM7WUFDbkIsT0FBTyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO1lBQzNELFNBQVMsRUFBRSxJQUFJO1lBQ2YsTUFBTSxFQUFFLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUM7WUFDN0MsV0FBVyxFQUFFLElBQUk7WUFDakIsS0FBSyxFQUFFLEtBQUs7U0FDYixDQUFDLENBQUM7UUFXSCxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsRUFBc0IsQ0FBQztRQUM1QyxNQUFNLGVBQWUsR0FBRyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUM3RCxLQUFLLE1BQU0sSUFBSSxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUU7WUFDckMsS0FBSyxDQUFDLEdBQUcsQ0FDUCxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLEVBQ3BELElBQUksQ0FBQyxRQUFRLENBQ2QsQ0FBQztTQUNIO1FBQ0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFFcEIsT0FBTztJQUNULENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSztRQUNULElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7WUFDN0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDN0I7UUFDRCxJQUFJLElBQUksQ0FBQyxNQUFNLFlBQVksT0FBTyxFQUFFO1lBQ2xDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUNuQjtRQUNELE9BQU8sSUFBSSxDQUFDLE1BQWlDLENBQUM7SUFDaEQsQ0FBQztJQUVELEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBWTtRQUNwQixNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNqQyxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDO0lBQ2pDLENBQUM7Q0FLRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJVSUxEX0lEIH0gZnJvbSBcIi4vY29uc3RhbnRzLnRzXCI7XG5pbXBvcnQgeyBkZW5vUGx1Z2luLCBlc2J1aWxkLCB0b0ZpbGVVcmwgfSBmcm9tIFwiLi9kZXBzLnRzXCI7XG5pbXBvcnQgeyBJc2xhbmQgfSBmcm9tIFwiLi90eXBlcy50c1wiO1xuXG5sZXQgZXNidWlsZEluaXRhbGl6ZWQ6IGJvb2xlYW4gfCBQcm9taXNlPHZvaWQ+ID0gZmFsc2U7XG5hc3luYyBmdW5jdGlvbiBlbnN1cmVFc2J1aWxkSW5pdGlhbGl6ZWQoKSB7XG4gIGlmIChlc2J1aWxkSW5pdGFsaXplZCA9PT0gZmFsc2UpIHtcbiAgICBpZiAoRGVuby5ydW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXNidWlsZEluaXRhbGl6ZWQgPSBlc2J1aWxkLmluaXRpYWxpemUoe1xuICAgICAgICB3YXNtVVJMOiBcImh0dHBzOi8vdW5wa2cuY29tL2VzYnVpbGQtd2FzbUAwLjE0LjM5L2VzYnVpbGQud2FzbVwiLFxuICAgICAgICB3b3JrZXI6IGZhbHNlLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVzYnVpbGQuaW5pdGlhbGl6ZSh7fSk7XG4gICAgfVxuICAgIGF3YWl0IGVzYnVpbGRJbml0YWxpemVkO1xuICAgIGVzYnVpbGRJbml0YWxpemVkID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChlc2J1aWxkSW5pdGFsaXplZCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICBhd2FpdCBlc2J1aWxkSW5pdGFsaXplZDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQnVuZGxlciB7XG4gICNpbXBvcnRNYXBVUkw6IFVSTDtcbiAgI2lzbGFuZHM6IElzbGFuZFtdO1xuICAjY2FjaGU6IE1hcDxzdHJpbmcsIFVpbnQ4QXJyYXk+IHwgUHJvbWlzZTx2b2lkPiB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3Rvcihpc2xhbmRzOiBJc2xhbmRbXSwgaW1wb3J0TWFwVVJMOiBVUkwpIHtcbiAgICB0aGlzLiNpc2xhbmRzID0gaXNsYW5kcztcbiAgICB0aGlzLiNpbXBvcnRNYXBVUkwgPSBpbXBvcnRNYXBVUkw7XG4gIH1cblxuICBhc3luYyBidW5kbGUoKSB7XG4gICAgY29uc3QgZW50cnlQb2ludHM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gICAgICBcIm1haW5cIjogbmV3IFVSTChcIi4uLy4uL3NyYy9ydW50aW1lL21haW4udHNcIiwgaW1wb3J0Lm1ldGEudXJsKS5ocmVmLFxuICAgIH07XG5cbiAgICBmb3IgKGNvbnN0IGlzbGFuZCBvZiB0aGlzLiNpc2xhbmRzKSB7XG4gICAgICBlbnRyeVBvaW50c1tgaXNsYW5kLSR7aXNsYW5kLmlkfWBdID0gaXNsYW5kLnVybDtcbiAgICB9XG5cbiAgICBjb25zdCBhYnNXb3JraW5nRGlyID0gRGVuby5jd2QoKTtcbiAgICBhd2FpdCBlbnN1cmVFc2J1aWxkSW5pdGlhbGl6ZWQoKTtcbiAgICBjb25zdCBidW5kbGUgPSBhd2FpdCBlc2J1aWxkLmJ1aWxkKHtcbiAgICAgIGJ1bmRsZTogdHJ1ZSxcbiAgICAgIGRlZmluZTogeyBfX0ZSU0hfQlVJTERfSUQ6IGBcIiR7QlVJTERfSUR9XCJgIH0sXG4gICAgICBlbnRyeVBvaW50cyxcbiAgICAgIGZvcm1hdDogXCJlc21cIixcbiAgICAgIG1ldGFmaWxlOiB0cnVlLFxuICAgICAgbWluaWZ5OiB0cnVlLFxuICAgICAgb3V0ZGlyOiBcIi5cIixcbiAgICAgIC8vIFRoaXMgaXMgcmVxdXJpZWQgdG8gZW5zdXJlIHRoZSBmb3JtYXQgb2YgdGhlIG91dHB1dEZpbGVzIHBhdGggaXMgdGhlIHNhbWVcbiAgICAgIC8vIGJldHdlZW4gd2luZG93cyBhbmQgbGludXhcbiAgICAgIGFic1dvcmtpbmdEaXIsXG4gICAgICBvdXRmaWxlOiBcIlwiLFxuICAgICAgcGxhdGZvcm06IFwibmV1dHJhbFwiLFxuICAgICAgcGx1Z2luczogW2Rlbm9QbHVnaW4oeyBpbXBvcnRNYXBVUkw6IHRoaXMuI2ltcG9ydE1hcFVSTCB9KV0sXG4gICAgICBzcGxpdHRpbmc6IHRydWUsXG4gICAgICB0YXJnZXQ6IFtcImNocm9tZTk5XCIsIFwiZmlyZWZveDk5XCIsIFwic2FmYXJpMTVcIl0sXG4gICAgICB0cmVlU2hha2luZzogdHJ1ZSxcbiAgICAgIHdyaXRlOiBmYWxzZSxcbiAgICB9KTtcbiAgICAvLyBjb25zdCBtZXRhZmlsZU91dHB1dHMgPSBidW5kbGUubWV0YWZpbGUhLm91dHB1dHM7XG5cbiAgICAvLyBmb3IgKGNvbnN0IHBhdGggaW4gbWV0YWZpbGVPdXRwdXRzKSB7XG4gICAgLy8gICBjb25zdCBtZXRhID0gbWV0YWZpbGVPdXRwdXRzW3BhdGhdO1xuICAgIC8vICAgY29uc3QgaW1wb3J0cyA9IG1ldGEuaW1wb3J0c1xuICAgIC8vICAgICAuZmlsdGVyKCh7IGtpbmQgfSkgPT4ga2luZCA9PT0gXCJpbXBvcnQtc3RhdGVtZW50XCIpXG4gICAgLy8gICAgIC5tYXAoKHsgcGF0aCB9KSA9PiBgLyR7cGF0aH1gKTtcbiAgICAvLyAgIHRoaXMuI3ByZWxvYWRzLnNldChgLyR7cGF0aH1gLCBpbXBvcnRzKTtcbiAgICAvLyB9XG5cbiAgICBjb25zdCBjYWNoZSA9IG5ldyBNYXA8c3RyaW5nLCBVaW50OEFycmF5PigpO1xuICAgIGNvbnN0IGFic0RpclVybExlbmd0aCA9IHRvRmlsZVVybChhYnNXb3JraW5nRGlyKS5ocmVmLmxlbmd0aDtcbiAgICBmb3IgKGNvbnN0IGZpbGUgb2YgYnVuZGxlLm91dHB1dEZpbGVzKSB7XG4gICAgICBjYWNoZS5zZXQoXG4gICAgICAgIHRvRmlsZVVybChmaWxlLnBhdGgpLmhyZWYuc3Vic3RyaW5nKGFic0RpclVybExlbmd0aCksXG4gICAgICAgIGZpbGUuY29udGVudHMsXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLiNjYWNoZSA9IGNhY2hlO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgYXN5bmMgY2FjaGUoKTogUHJvbWlzZTxNYXA8c3RyaW5nLCBVaW50OEFycmF5Pj4ge1xuICAgIGlmICh0aGlzLiNjYWNoZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLiNjYWNoZSA9IHRoaXMuYnVuZGxlKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLiNjYWNoZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgIGF3YWl0IHRoaXMuI2NhY2hlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy4jY2FjaGUgYXMgTWFwPHN0cmluZywgVWludDhBcnJheT47XG4gIH1cblxuICBhc3luYyBnZXQocGF0aDogc3RyaW5nKTogUHJvbWlzZTxVaW50OEFycmF5IHwgbnVsbD4ge1xuICAgIGNvbnN0IGNhY2hlID0gYXdhaXQgdGhpcy5jYWNoZSgpO1xuICAgIHJldHVybiBjYWNoZS5nZXQocGF0aCkgPz8gbnVsbDtcbiAgfVxuXG4gIC8vIGdldFByZWxvYWRzKHBhdGg6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgLy8gICByZXR1cm4gdGhpcy4jcHJlbG9hZHMuZ2V0KHBhdGgpID8/IFtdO1xuICAvLyB9XG59XG4iXX0=