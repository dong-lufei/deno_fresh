import { renderToString } from "preact-render-to-string";
import { h, options } from "preact";
import { HEAD_CONTEXT } from "../runtime/head.ts";
import { CSP_CONTEXT, nonce, NONE, UNSAFE_INLINE } from "../runtime/csp.ts";
import { bundleAssetUrl } from "./constants.ts";
import { assetHashingHook } from "../runtime/utils.ts";
export class RenderContext {
    #id;
    #state = new Map();
    #styles = [];
    #url;
    #route;
    #lang;
    constructor(id, url, route, lang) {
        this.#id = id;
        this.#url = url;
        this.#route = route;
        this.#lang = lang;
    }
    get id() {
        return this.#id;
    }
    get state() {
        return this.#state;
    }
    get styles() {
        return this.#styles;
    }
    get url() {
        return this.#url;
    }
    get route() {
        return this.#route;
    }
    get lang() {
        return this.#lang;
    }
    set lang(lang) {
        this.#lang = lang;
    }
}
function defaultCsp() {
    return {
        directives: { defaultSrc: [NONE], styleSrc: [UNSAFE_INLINE] },
        reportOnly: false,
    };
}
export async function render(opts) {
    const props = {
        params: opts.params,
        url: opts.url,
        route: opts.route.pattern,
        data: opts.data,
    };
    if (opts.error) {
        props.error = opts.error;
    }
    const csp = opts.route.csp
        ? defaultCsp()
        : undefined;
    const headComponents = [];
    const vnode = h(CSP_CONTEXT.Provider, {
        value: csp,
        children: h(HEAD_CONTEXT.Provider, {
            value: headComponents,
            children: h(opts.app.default, {
                Component() {
                    return h(opts.route.component, props);
                },
            }),
        }),
    });
    const ctx = new RenderContext(crypto.randomUUID(), opts.url, opts.route.pattern, opts.lang ?? "en");
    if (csp) {
        const newCsp = defaultCsp();
        csp.directives = newCsp.directives;
        csp.reportOnly = newCsp.reportOnly;
    }
    headComponents.splice(0, headComponents.length);
    ISLANDS.splice(0, ISLANDS.length, ...opts.islands);
    ENCOUNTERED_ISLANDS.clear();
    ISLAND_PROPS = [];
    let bodyHtml = null;
    function render() {
        bodyHtml = renderToString(vnode);
        return bodyHtml;
    }
    await opts.renderFn(ctx, render);
    if (bodyHtml === null) {
        throw new Error("The `render` function was not called by the renderer.");
    }
    const imports = opts.imports.map((url) => {
        const randomNonce = crypto.randomUUID().replace(/-/g, "");
        if (csp) {
            csp.directives.scriptSrc = [
                ...csp.directives.scriptSrc ?? [],
                nonce(randomNonce),
            ];
        }
        return [url, randomNonce];
    });
    if (ENCOUNTERED_ISLANDS.size > 0) {
        {
            const randomNonce = crypto.randomUUID().replace(/-/g, "");
            if (csp) {
                csp.directives.scriptSrc = [
                    ...csp.directives.scriptSrc ?? [],
                    nonce(randomNonce),
                ];
            }
            const url = bundleAssetUrl("/main.js");
            imports.push([url, randomNonce]);
        }
        let islandImports = "";
        let islandRegistry = "";
        for (const island of ENCOUNTERED_ISLANDS) {
            const randomNonce = crypto.randomUUID().replace(/-/g, "");
            if (csp) {
                csp.directives.scriptSrc = [
                    ...csp.directives.scriptSrc ?? [],
                    nonce(randomNonce),
                ];
            }
            const url = bundleAssetUrl(`/island-${island.id}.js`);
            imports.push([url, randomNonce]);
            islandImports += `\nimport ${island.name} from "${url}";`;
            islandRegistry += `\n  ${island.id}: ${island.name},`;
        }
        const initCode = `import { revive } from "${bundleAssetUrl("/main.js")}";${islandImports}\nrevive({${islandRegistry}\n});`;
        const randomNonce = crypto.randomUUID().replace(/-/g, "");
        if (csp) {
            csp.directives.scriptSrc = [
                ...csp.directives.scriptSrc ?? [],
                nonce(randomNonce),
            ];
        }
        bodyHtml +=
            `<script id="__FRSH_ISLAND_PROPS" type="application/json">${JSON.stringify(ISLAND_PROPS)}</script><script type="module" nonce="${randomNonce}">${initCode}</script>`;
    }
    const html = template({
        bodyHtml,
        headComponents,
        imports,
        preloads: opts.preloads,
        styles: ctx.styles,
        lang: ctx.lang,
    });
    return [html, csp];
}
export function template(opts) {
    const page = (h("html", { lang: opts.lang },
        h("head", null,
            h("meta", { charSet: "UTF-8" }),
            h("meta", { "http-equiv": "X-UA-Compatible", content: "IE=edge" }),
            h("meta", { name: "viewport", content: "width=device-width, initial-scale=1.0" }),
            opts.preloads.map((src) => h("link", { rel: "modulepreload", href: src })),
            opts.imports.map(([src, nonce]) => (h("script", { src: src, nonce: nonce, type: "module" }))),
            h("style", { id: "__FRSH_STYLE", dangerouslySetInnerHTML: { __html: opts.styles.join("\n") } }),
            opts.headComponents),
        h("body", { dangerouslySetInnerHTML: { __html: opts.bodyHtml } })));
    return "<!DOCTYPE html>" + renderToString(page);
}
const ISLANDS = [];
const ENCOUNTERED_ISLANDS = new Set([]);
let ISLAND_PROPS = [];
const originalHook = options.vnode;
let ignoreNext = false;
options.vnode = (vnode) => {
    assetHashingHook(vnode);
    const originalType = vnode.type;
    if (typeof vnode.type === "function") {
        const island = ISLANDS.find((island) => island.component === originalType);
        if (island) {
            if (ignoreNext) {
                ignoreNext = false;
                return;
            }
            ENCOUNTERED_ISLANDS.add(island);
            vnode.type = (props) => {
                ignoreNext = true;
                const child = h(originalType, props);
                ISLAND_PROPS.push(props);
                return h(`!--frsh-${island.id}:${ISLAND_PROPS.length - 1}--`, null, child);
            };
        }
    }
    if (originalHook)
        originalHook(vnode);
};
//# sourceMappingURL=data:application/json;base64,